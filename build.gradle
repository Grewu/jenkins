plugins {
    id 'java'
    id 'war'
    id "org.liquibase.gradle" version "2.2.0"
}

group 'org.example'

repositories {
    mavenCentral()
}

ext {
    springVersion = '6.1.6'
    postgresVersion = '42.3.0'
    liquibaseCore = '4.5.0'
    picocliVersion = '4.6.3'
    junitVersion = '5.10.0'
    jacksonCoreVersion = '2.17.2'
    hibernateCore = '6.6.0.Final'
    mapstructVersion = '1.5.5.Final'
    lombokVersion = '1.18.34'
    lombokMapstructBindingVersion = '0.2.0'
    servletVersion = '2.5'
    h2Version = '2.2.224'
    mockitoVersion = '5.12.0'
    postgresqlTestContainer = '1.19.7'
    jsonassertVersion = '1.5.0'
    jakartaServletApi = '6.0.0'
    slf4jVersion = '2.0.16'
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation "org.hibernate:hibernate-core:${hibernateCore}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateCore}"

    implementation "jakarta.servlet:jakarta.servlet-api:${jakartaServletApi}"

    implementation "org.springframework:spring-webmvc:${springVersion}"
    implementation "org.springframework:spring-web:${springVersion}"
    implementation "org.springframework:spring-orm:${springVersion}"
    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-aop:${springVersion}"
    implementation "org.springframework.security:spring-security-web:${springVersion}"
    implementation "org.springframework.security:spring-security-config:${springVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonCoreVersion}"
    implementation "org.postgresql:postgresql:${postgresVersion}"
    implementation "org.liquibase:liquibase-core:${liquibaseCore}"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"


    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


    testImplementation "org.springframework.security:spring-security-test:${springVersion}"
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "org.testcontainers:postgresql:${postgresqlTestContainer}"
    testImplementation "org.testcontainers:junit-jupiter:${postgresqlTestContainer}"
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.skyscreamer:jsonassert:${jsonassertVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

test {
    useJUnitPlatform()
}

war {
    archiveBaseName.set('senla')
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}
